import 'lib.struct'


readAGif = (filecontent)->
	read = (n)->
		result, filecontent = filecontent\sub(1,n), filecontent\sub(n+1)
		result
	read_block = ->
		switch read(1)
			when '!'
				switch read(1)\byte()
					when 0xf9
						_, flags, delay, transparent, _ = struct.unpack('<BBHBB', read(6))
						pp 'graphiccontrol', flags, delay, transparent
						{id: 'graphiccontrol', flags: flags, delay: delay/100, transparent: transparent}
					when 0xfe
						pp 'comment'
						size = read(1)\byte()
						while size > 0 do _, size = read(size), read(1)\byte()
						{id: 'commment'}
					when 0x01
						pp 'plain text'
						read(13)
						size = read(1)\byte()
						while size > 0 do _, size = read(size), read(1)\byte()
						{id: 'plaintext'}
					when 0xff
						pp 'application extension'
						read(12)
						size = read(1)\byte()
						while size > 0 do _, size = read(size), read(1)\byte()
						{id: 'application'}
			when ','
				left, top, width, height, flags = struct.unpack('<HHHHB', read(9))
				pp 'imageblock', left, top, width, height, flags
				palette = flags>127 and read(3*2^(flags%8+1)) or ''
				minimumcodesize, size = read(1)\byte(), read(1)\byte()
				blocks = while size > 0
					with read(size)
						size = read(1)\byte()
				pp #blocks, #blocks[1], blocks[1]
				{id: 'imageblock', left: left, top: top, width: width, height: height, flags: flags, palette: palette, minimumcodesize: minimumcodesize, blocks: blocks}
			when ';' then {id: 'terminator'}
			else pp 'block read error'
	assert read(6) == 'GIF89a'
	width, height, flags, bg, aspect = struct.unpack('<HHBBB', read(7))
	palette = flags > 127 and read(3*2^(flags%8+1)) or ''
	pp width, height, flags, #palette/3
	blocks = while #filecontent > 0 do read_block() -- for/whileでcollectするには受け手/returnの明示が必要
	{width: width, height: height, flags: flags, bg: bg, aspect: aspect, palette: palette, blocks: blocks}
	

read1frame = (frame)->
	data = 'GIF89a' .. struct.pack('<HHBBB', frame.width, frame.height, frame.globalflags, frame.bg, frame.aspect) .. frame.globalpalette ..
		'!' .. struct.pack('<BBBHBB', 0xf9, 4, frame.graphiccontrol.flags, math.floor(frame.graphiccontrol.delay*100), frame.graphiccontrol.transparent, 0) ..
		',' .. struct.pack('<HHHHB', 0, 0, frame.width, frame.height, frame.flags) .. frame.palette .. string.char(frame.minimumcodesize) .. table.concat([string.char(#b)..b for b in *frame.blocks]) .. '\0' ..
		';'
	-- pp data\sub(1,20)
	-- love.filesystem.write('1.gif', data)
	gr.newImage(love.filesystem.newFileData(data, '1.gif'))


export class AGif
	new: (filecontent)=>
		{width: width, height:height, flags: flags, bg:bg, aspect: aspect, palette: palette, blocks: blocks} = readAGif(filecontent)
		@loops, @bgcolor, @frames, graphiccontrol = math.huge, {0,0,0,1}, {}, nil
		for block in *blocks
			switch block.id
				when 'graphiccontrol' then graphiccontrol = block
				when 'imageblock' then @frames[] = {...block, globalflags: flags, bg: bg, aspect: aspect, globalpalette: palette, graphiccontrol: graphiccontrol}
		@canvas = gr.newCanvas(width, height)
		@clock, @index = 0, 1
		@update1frame(@frames[1])
	
	update1frame: (frame)=>
		frame.image or= read1frame(frame) -- 破壊的操作(テーブルに追加している)
		gr.setCanvas(@canvas)
		@._dispose?() -- 下の行で設定したdispose関数(があれば)呼び出し
		@_dispose = switch frame.dispose -- 次回呼び出された時に使う(実質static変数)
			when 0 then nil
			when 1 then -> -- 現在のフレーム情報を使うクロージャを返し、次のフレームを描く時に実行させる
				gr.setScissor(frame.left, frame.top, frame.width, frame.height)
				gr.clear(@bgcolor)
				gr.setScissor()
			when 2 then nil -- [ ] todo not impl
		switch frame.blend
			-- when 0 then noop()
			when 1
				gr.setScissor(frame.left, frame.top, frame.width, frame.height)
				gr.clear(@bgcolor)
				gr.setScissor()
		gr.draw(gr.setColor(1,1,1) or frame.image, frame.left, frame.top)
		gr.setCanvas()
	
	update: (dt)=>
		@clock += dt
		while @clock > @frames[@index].graphiccontrol.delay
			@clock -= @frames[@index].graphiccontrol.delay
			@index = if @index < #@frames then @index + 1
			else
				@plays -= 1
				if @plays <= 0
					@update = =>
					return
				1
			@update1frame(@frames[@index])

