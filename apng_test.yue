import 'macros' as {$}
_G.PROJECTNAME, _G.VERSION = $FILE\sub(1,-5), "0.1a(#{$DATE})" -- どのファイルからでもsave loadに使うかもなのでglobalにしておく
if 'DEBUG' in arg then require 'lib.inspect'
import 'lib.lume'
import 'utl' as --[[:pos_in_box, :align, :play, :L,]] :uipalette
import 'lib.maid64' -- 改造して高解像度を初期値にした
-- import 'color' as :lighten
-- import 'lib.gifcat' -- gifcat.luaもprojectrootに置く? 全部に?入れているので、ここ消すだけで使わなくなる
-- import 'input' as :input--, :SoftGamepad -- これもuiの前に書く必要がある？
import 'ui' as :Scene--, :SelectBox
-- import 'bigmap' as :Map
-- import 'lib.tween'  -- 改造してdelayを可能にした
import 'apng' as :APNG
-- local * -- まとめて前方宣言(*か^)

love.window.setTitle(PROJECTNAME .. ' - v' .. VERSION)
love.window.setMode(1280, 720, if 'Android' == love.system.getOS() then {} else {resizable: true})
maid64.setup(1280, 720)
love.mouse.getPosition = maid64.mouse.getPosition -- プログラム全体としてmaid64の座標系を使うことにする
love.touch.getPosition0 or= love.touch.getPosition -- 保存
love.touch.getPosition = (id)-> maid64.transformPosition(love.touch.getPosition0(id))
love.audio.setVolume(.5)
-- BGM'assets/sounds/052622ineedtogetouttahere_32k.mp3'


class GameScene extends Scene
	new: =>
		@apng = with APNG(love.filesystem.read('elephant.apng'))
			.clearcolor = {...uipalette.base, [4]: 0}
			-- .plays = 2

	filedropped: (file)=>
		@apng = with APNG(file\read())
			.clearcolor = {...uipalette.base, [4]: 0}

	update: (dt)=>
		@apng\update(dt)

	draw: =>
		gr.draw(@apng.canvas)

love.load = ->
	if 'DEBUG' in arg
		with require 'lib.vudu'
			.initialize()
			.initializeDefaultHotkeys()
	GameScene()\attach()

	if 'DEBUG' in arg -- hotswap
		Watchdog = package.loaded['ui'].Watchdog
		Watchdog{
			"#{$FILE}": -> Watchdog.transpile("#{$FILE}", 'main.lua')
			'ui.yue': -> Watchdog.transpile('ui.yue')
			'input.yue': -> Watchdog.transpile('input.yue')
			-- 'color.yue': -> Watchdog.transpile('color.yue')
			'utl.yue': -> Watchdog.transpile('utl.yue')
			'bigmap.yue': -> Watchdog.transpile('bigmap.yue')
			-- 'BDF.yue': -> Watchdog.transpile('BDF.yue')
			-- 'distribute.yue': -> Watchdog.transpile('distribute.yue')
			'main.lua': -> lume.hotswap('main')
			'input.lua': -> lume.hotswap('input')
			'ui.lua': -> lume.hotswap('ui')
			-- 'color.lua': -> lume.hotswap('color')
			'utl.lua': -> lume.hotswap('utl')
			'bigmap.lua': -> lume.hotswap('bigmap')
			-- 'BDF.lua': -> lume.hotswap('BDF')
			-- 'distribute.lua': -> lume.hotswap('distribute')
			}
	if 'DISTRIBUTE' in arg --DEBUGMODE -- build
		love.thread.newThread([[
_G.PROJECTNAME, _G.VERSION, description = ...
os.execute("cp apng_test.yue apng.yue apng.lua apng_test/.")
require('distribute').build({'lib/gifcat.lua', 'gifcatlib.so', 'gifcatlib.dll', 'lib/inspect.lua', 'lib/struct.lua', 'lib/bitop.lua', 'lib/crc32.lua', 'apng.lua'})
require('distribute').modify_index_html(require('lib.os_capture').capture('echo \''..description..'\' | pandoc -f markdown -t html'))
]])\start PROJECTNAME, VERSION, [[

## LOVE2DでAPNGを扱うテストです。

メモリ上で１フレームごとに分割し、PNGファイルデータとして読み込みます

struct.lua、crc32.lua、bitop.lua(Web版の時)が必要です

- [apng_test.love](apng_test.love)
- [apng_test_win64.zip](apng_test_win64.zip)
- [apng.yue](apng.yue)
- [apng.lua](apng.lua)

zlib/libpng license
]]


